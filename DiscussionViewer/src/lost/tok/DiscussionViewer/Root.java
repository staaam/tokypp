

/*
 * Created on Fri Jun 22 20:03:23 IDT 2007
 *
 * Generated by GEMS 
 */
 
package lost.tok.DiscussionViewer;

import java.util.List;

/*******************************************************************************
* Copyright (c) 2005 Jules White. All rights reserved.
* This program and the accompanying materials are made available under the
* terms of the Common Public License v1.0 which accompanies this distribution,
* and is available at http://www.eclipse.org/legal/cpl-v10.html
* 
* Contributors: Jules White - initial API and implementation
******************************************************************************/

import org.gems.designer.metamodel.gen.AttributeInfo;
import org.gems.designer.model.AttributeValidator;
import org.gems.designer.ModelProvider;
import org.gems.designer.ModelRepository;
import org.gems.designer.model.Visitor;
import org.gems.designer.model.ConnectionType;
import org.gems.designer.model.Wire;
import org.eclipse.ui.views.properties.IPropertyDescriptor;

import java.util.Vector;
import org.gems.designer.model.ConstraintViolation;

import org.gems.designer.model.Container;
import org.gems.designer.model.LogicElement;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;

import lost.tok.DiscussionViewer.emf.*;

public class Root extends org.gems.designer.model.Root  implements Adapter{

	private Object model_;
	private Notifier target_;
	
	
	public Root(){
		
	}
	
	public Root(Object mdl){
		model_ = mdl;
	}
	
	public lost.tok.DiscussionViewer.emf.Root getEMFObject(){
		return getModel();
	}
	
	
	public void setRealRoot(DiscussionViewer n){
		getModel().setRealRoot(n.getEMFObject());
		children.clear();
		List nchildren = n.getChildren();
		for(Object o : nchildren){
			children.add((org.gems.designer.model.ModelObject)o);
		}
		if(realRoot_ != null){
			realRoot_.removePropertyChangeListener(this);
		}
		realRoot_ = n;
		if(realRoot_ != null){
			realRoot_.addPropertyChangeListener(this);
		}
	}
	
	public DiscussionViewer getRealRoot(){
		return (DiscussionViewer)realRoot_;
	}
	
	
	

	
	
    public String getModelID() {
        return DiscussionViewerProvider.MODEL_ID;
    }
    
    public lost.tok.DiscussionViewer.emf.Root getModel(){
    	if(model_ == null){
    		model_ = lost.tok.DiscussionViewer.emf.impl.DiscussionViewerFactoryImpl.eINSTANCE.createRoot();
    		((lost.tok.DiscussionViewer.emf.Root)model_).eAdapters().add(this);	
    	}
    	return (lost.tok.DiscussionViewer.emf.Root)model_;
    }
    	
    	public Notifier getTarget() {
    		return target_;
    	}
    	
    	public void setTarget(Notifier newTarget) {
    		target_ = newTarget;
    	}
    	
    	public boolean isAdapterForType(Object type) {
    		return getModel() == type;
    	}
    
     
    public ModelProvider getModelProvider() {
        ModelProvider provider = super.getModelProvider();
        if(provider == null){
        	provider = new DiscussionViewerProvider();
        	ModelRepository.getInstance().registerModelProvider(provider);
        }
        return provider;
    }
    
    protected void buildContainmentNames() {
       
    }
    
    
    public void addChild(LogicElement child, int index) {
        addChild(child,index,true);
    }
    
     public void addChild(LogicElement child, int index, boolean modifymodel) {
        if(modifymodel){
    	if(child instanceof AbstractDicObject){
    		getModel().getAbstractDicObject().add(((AbstractDicObject)child).getEMFObject());
    	}
    	
    	if(child instanceof Opinion){
    		getModel().getOpinion().add(((Opinion)child).getEMFObject());
    	}
    	
    	if(child instanceof Quote){
    		getModel().getQuote().add(((Quote)child).getEMFObject());
    	}
    	
    	if(child instanceof DiscussionViewer){
    		getModel().getDiscussionViewer().add(((DiscussionViewer)child).getEMFObject());
    	}
    	
    	
    	}
    	super.addChild(child,index,modifymodel);
    }
    
    public void removeChild(LogicElement child){
     	removeChild(child,true);
    }
    
    public void removeChild(LogicElement child, boolean modifymodel){
    	if(modifymodel){
     	
    	if(child instanceof AbstractDicObject){
    		getModel().getAbstractDicObject().remove(((AbstractDicObject)child).getEMFObject());
    	}
    	
    	if(child instanceof Opinion){
    		getModel().getOpinion().remove(((Opinion)child).getEMFObject());
    	}
    	
    	if(child instanceof Quote){
    		getModel().getQuote().remove(((Quote)child).getEMFObject());
    	}
    	
    	if(child instanceof DiscussionViewer){
    		getModel().getDiscussionViewer().remove(((DiscussionViewer)child).getEMFObject());
    	}
    	
    	
    	}
    	super.removeChild(child,modifymodel);
    }
    

	public void addConnection(Wire w) {
	ConnectionType type = w.getConnectionType();
	if(type != null){
	
		if(type.getName().equals(RelationConnectionType.NAME)){
			RelationConnection con = (RelationConnection)w.getAttribute(RelationConnectionType.NAME);
			if(con != null){
				getModel().getRelationConnection().add(con);
			}
		}
		
	
		if(type.getName().equals(ContainmentConnectionType.NAME)){
			ContainmentConnection con = (ContainmentConnection)w.getAttribute(ContainmentConnectionType.NAME);
			if(con != null){
				getModel().getContainmentConnection().add(con);
			}
		}
		
	
	}
	}
	public void notifyChanged(Notification notification) {}
	
	public void removeConnection(Wire w) {
	ConnectionType type = w.getConnectionType();
	if(type != null){
	
		if(type.getName().equals(RelationConnectionType.NAME)){
			RelationConnection con = (RelationConnection)w.getAttribute(RelationConnectionType.NAME);
			if(con != null){
				getModel().getRelationConnection().remove(con);
			}
		}
	
		if(type.getName().equals(ContainmentConnectionType.NAME)){
			ContainmentConnection con = (ContainmentConnection)w.getAttribute(ContainmentConnectionType.NAME);
			if(con != null){
				getModel().getContainmentConnection().remove(con);
			}
		}
	
	}
	}
	
	
}

