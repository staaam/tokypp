/*******************************************************************************
* Copyright (c) 2005 Jules White. All rights reserved.
* This program and the accompanying materials are made available under the
* terms of the Common Public License v1.0 which accompanies this distribution,
* and is available at http://www.eclipse.org/legal/cpl-v10.html
* 
* Contributors: Jules White - initial API and implementation
******************************************************************************/


/*
 * Created on Mon Jun 25 22:37:01 IDT 2007
 *
 * Generated by GEMS 
 */
 
package lost.tok.DiscussionViewer;

import org.gems.designer.ElementGroup;
import org.gems.designer.ElementGroupImpl;
import org.gems.designer.ConstraintsChecker;
import org.gems.designer.GenericElementFactory;
import org.gems.designer.GraphicsProvider;
import org.gems.designer.LabelProvider;
import org.gems.designer.ModelElementFactory;
import org.gems.designer.ModelProvider;
import org.gems.designer.ModelRepository;
import org.gems.designer.PaletteProvider;
import org.gems.designer.model.Atom;
import org.gems.designer.model.Model;
import org.eclipse.emf.ecore.EPackage;


/**
 * 
 */
 
public class DiscussionViewerProvider implements ModelProvider, org.gems.designer.model.EMFModelProvider{
    public static final String MODEL_ID = "lost.tok.discussionViewer";
    private GraphicsProviderImpl graphicsProvider_ = new GraphicsProviderImpl();
    private LabelProviderImpl labelProvider_ = new LabelProviderImpl();
    private GenericElementFactory factory_ = new GenericElementFactory();
    private DiscussionViewerPaletteProvider paletteProvider_ = new DiscussionViewerPaletteProvider();
    private DiscussionViewerConstraintsChecker checker_ = new DiscussionViewerConstraintsChecker();
    private static DiscussionViewerProvider instance_;
    
    
    public static DiscussionViewerProvider getInstance(){
    	if(instance_ == null){
    		instance_ = new DiscussionViewerProvider();
        	ModelRepository.getInstance().registerModelProvider(instance_);
    	}
    	return instance_;
    }
    
	private class RootModel extends Model{
		
		public Atom[] getChildAtoms() {
			
			Atom[] atoms = {
				
			};
			return atoms;
		}
		public org.gems.designer.model.Model[] getChildModels() {
			
			Model[] models = {
			     
				   new AbstractDicObject(),
				   new Opinion(),
				   new Quote(),
				   new DiscussionViewer()};
			return models;
		}
        public String getModelID() {
            return MODEL_ID;
        }
}
	

	/* (non-Javadoc)
	 * @see org.gems.designer.ModelProvider#getRootModel()
	 */
	public org.gems.designer.model.Model getRootModel() {
		
		return new RootModel();
	}

	/* (non-Javadoc)
	 * @see org.gems.designer.ModelProvider#getGraphicsProvider()
	 */
	public GraphicsProvider getGraphicsProvider() {
		
		return graphicsProvider_;
	}

	/* (non-Javadoc)
	 * @see org.gems.designer.ModelProvider#getLabelProvider()
	 */
	public LabelProvider getLabelProvider() {
		
		return labelProvider_;
	}

	/**
	 * 
	 */
	public DiscussionViewerProvider() {
		super();
	}

	public ModelElementFactory getModelElementFactory() {
		return factory_;
	}


    public String getModelID() {
        return MODEL_ID;
    }
    
    public ConstraintsChecker getConstraintsChecker() {
        return checker_;
    }
    
    public PaletteProvider getPaletteProvider(){
        return paletteProvider_;
    }
    
    public ElementGroup[] getElementGroups() {
		ElementGroup[] els = {
			new ElementGroupImpl(getRootModel().getChildAtoms(),"Atoms"),
			new ElementGroupImpl(getRootModel().getChildModels(),"Models")
		};
		return els;
	}
	
	public EPackage getEMFPackage(){
		return lost.tok.DiscussionViewer.emf.impl.DiscussionViewerPackageImpl.eINSTANCE;
	}
 
}

